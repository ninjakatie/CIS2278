package hw1;

import java.util.Date;
import java.util.List;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.GregorianCalendar;

public class Person implements Cloneable {
	String firstName;
	String lastName;
	Date birthdate;
	List<Dog> dogs = new ArrayList<Dog>();
	Address address;
	
	public Person(String firstName, String lastName, Date birthdate, List<Dog> dogs, Address address) {
		this.firstName = firstName;
		this.lastName = lastName;
		this.birthdate = birthdate;
		this.dogs = dogs;
		this.address = address;
	}
	
	public Person() {
	}
	
	public String getFirstName() {
		return firstName;
	}

	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}

	public String getLastName() {
		return lastName;
	}

	public void setLastName(String lastName) {
		this.lastName = lastName;
	}

	public Date getBirthdate() {
		return birthdate;
	}

	public void setBirthdate(Date birthdate) {
		this.birthdate = birthdate;
	}

	public List<Dog> getDogs() {
		return dogs;
	}

	public void setDogs(List<Dog> dogs) {
		this.dogs = dogs;
	}

	public Address getAddress() {
		return address;
	}

	public void setAddress(Address address) {
		this.address = address;
	}
//computing the age of the person, by first finding their birth date from their first and last name. 
	public int getAge() {
		int age = 0;
		Calendar today = Calendar.getInstance();
		Calendar birthday = new GregorianCalendar();
		
		birthday.setTime(birthdate);
		int yearDiff = today.get(Calendar.YEAR) - birthday.get(Calendar.YEAR);
		if (today.get(Calendar.MONTH) < birthday.get(Calendar.MONTH)) {
	          yearDiff = yearDiff - 1;}
	    else if (today.get(Calendar.MONTH) == birthday.get(Calendar.MONTH) &&
	            today.get(Calendar.DATE) < birthday.get(Calendar.DATE) ) {
	          yearDiff = yearDiff - 1;
	      }
	    	age = yearDiff;
		return age;
	}
	
	public void addDog(String name, String breed, int age, char gender, int weight, int id) {
		Dog newDog = new Dog(name, breed, age, gender, weight, id);
		dogs.add(newDog);
	}
	
	public void removeDog(String nameToSearch) {
		for (Dog d: dogs) {
			if (d.name.equals(nameToSearch)) {
				dogs.remove(d);
				System.out.print(dogs);
			}
		}
	}

	@Override
	public String toString() {
		return "Person [firstName=" + firstName + ", lastName=" + lastName + ", birthdate=" + birthdate + ", dogs="
				+ dogs + ", address=" + address + ", getFirstName()=" + getFirstName() + ", getLastName()="
				+ getLastName() + ", getBirthdate()=" + getBirthdate() + ", getDogs()=" + getDogs() + ", getAddress()="
				+ getAddress() + ", getAge()=" + getAge() + ", getClass()=" + getClass() + ", hashCode()=" + hashCode()
				+ ", toString()=" + super.toString() + "]";
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((address == null) ? 0 : address.hashCode());
		result = prime * result + ((dogs == null) ? 0 : dogs.hashCode());
		result = prime * result + ((firstName == null) ? 0 : firstName.hashCode());
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		Person other = (Person) obj;
		if (address == null) {
			if (other.address != null)
				return false;
		} else if (!address.equals(other.address))
			return false;
		if (dogs == null) {
			if (other.dogs != null)
				return false;
		} else if (!dogs.equals(other.dogs))
			return false;
		if (firstName == null) {
			if (other.firstName != null)
				return false;
		} else if (!firstName.equals(other.firstName))
			return false;
		return true;
	}



	}


